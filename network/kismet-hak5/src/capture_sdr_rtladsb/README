Kismet RTLADSB Support

- UNDER DEVELOPMENT -

    The rtl-sdr support in Kismet is under heavy development, not all
    features are complete at this time. Most of this code is adapted
    from Dragorn's rtl_433 support.

- RTL-SDR -

    The Kismet rtladsb SDR capture requires a RTL-SDR USB device; you 
    can learn more about these on the main RTL-SDR website:
        https://www.rtl-sdr.com

    The RTL-SDR is typically an extremely low-cost USB device which
    can perform limited raw radio capture.  While often *extremely*
    limited, the RTL-SDR is still capable of a surprising amount of
    useful capture.

    To use the RTL SDR capture device, you will need a rtlsdr; 
    your Wi-Fi card cannot receive the signal.

- RTLADSB -

    Kismet requires the rtl_adsb tool be installed.  The rtl_adsb
    tool can typically be installed as package by your distribution
    or compiled as part of the pybombs system.

    rtl_adsb is able capture and decode the ADSB signal transmitted
    from a varity of aircraft. For more information about this
    signal and how to decode it, you can visit

        https://mode-s.org/decode/adsb/introduction.html

- CONFIGURING RTLADSB -

    The only configuration necessary to configure rtladsb is to make
    sure that your user has access to the rtlsdr USB device.  
    This is usually accomplished by installing the udev rules which
    accompany librtlsdr.

    Typically the group `plugdev` is given access; make sure the 
    user you plan to run Kismet as is in that group.

    For more information, check the documentation that came with
    librtlsdr or the rtlsdr website:
        https://rtl-sdr.com

- CONFIGURING KISMET -

    The Kismet capture driver is implemented as a Python datasource;
    you will need the Kismet-related Python modules from the
    python_modules/ directory of Kismet (which will be installed
    automatically in most cases).

    The rtladsb support also requires the NumPy Python module; you can
    typically get this as a package from your distribution (often 
    python-numpy) or via pip.

    rtlsdr hardware will be automatically detected and shown in the
    Datasources window, or it can be configured as 'rtladsb-X',
    where 'X' is the radio you wish to use.  If you have only one
    radio, this will always be zero; for instance:

        source=rtladsb-0:name=some_sdr

